#include <stdio.h>
#include <stdbool.h>
#include <string.h>
#include <unistd.h>
#include "esp_err.h"
#include "esp_wifi.h"
#include "nvs_flash.h"

int retry_num=0;

static void wifi_event_handler(void *event_handler_arg, esp_event_base_t event_base, int32_t event_id,void *event_data) {
	if(event_id == WIFI_EVENT_STA_START) {
  		printf("WIFI CONNECTING....\n");
	} else if (event_id == WIFI_EVENT_STA_CONNECTED) {
  		printf("WiFi CONNECTED\n");
	} else if (event_id == WIFI_EVENT_STA_DISCONNECTED) {
  		printf("WiFi lost connection\n");
  		if(retry_num<5) {
			esp_wifi_connect();
			retry_num++;
			printf("Retrying to Connect...\n");
		}
	} else if (event_id == IP_EVENT_STA_GOT_IP) {
  		printf("Wifi got IP...\n\n");
	}
}
void esp_print_ip(void) {
 	esp_netif_ip_info_t ip_info;
    esp_netif_get_ip_info(IP_EVENT_STA_GOT_IP,&ip_info);
    printf("My IP: %s\n", IP2STR(&ip_info.ip));
}


void setup(void) {
	printf("WiFi setup start\n");

	esp_netif_init(); // ESP network interface init
    esp_event_loop_create_default();     // event loop  
    esp_netif_create_default_wifi_sta(); // Prepare data structure for WiFi client station

	//esp_event_handler_register(WIFI_EVENT, ESP_EVENT_ANY_ID, wifi_event_handler, NULL);
    //esp_event_handler_register(IP_EVENT, IP_EVENT_STA_GOT_IP, wifi_event_handler, NULL);

    wifi_init_config_t cfg = WIFI_INIT_CONFIG_DEFAULT(); // Default WiFi configuration structure
	esp_wifi_init(&cfg); // Init default values

	// Setup SSID and PASS for our WiFi AP
	wifi_config_t wifi_config = {
        .sta = {
            .ssid = "iotagh",
            .password = "IoTiISW123",
        },
    };

    esp_wifi_set_config(WIFI_IF_STA, &wifi_config);
    esp_wifi_start();
	esp_wifi_set_mode(WIFI_MODE_STA);
	esp_err_t status = esp_wifi_connect();
	if (status == ESP_OK)
		printf("WiFI connected\n");
	else
 		printf("WiFI connection failed: %s\n", esp_err_to_name(status));
}



void app_main(void) {
    //Initialize NVS to store WiFi AP configuration
    esp_err_t ret = nvs_flash_init();
    if (ret == ESP_ERR_NVS_NO_FREE_PAGES || ret == ESP_ERR_NVS_NEW_VERSION_FOUND) {
      nvs_flash_erase();
      nvs_flash_init();
    }

	setup();

    while (true) {
        printf("Hello from app_main!\n");
        sleep(1);
    }
}
